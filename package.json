{
  "name": "prprompts-flutter-generator",
  "version": "4.4.1",
  "description": "AI-powered Flutter development with full automation - Generate 32 security-audited guides & auto-implement in 2-3 hours (40-60x faster). Now with Flutter flavors, 7 skills, multi-AI parity, API validation, rate limiting, and interactive mode!",
  "keywords": [
    "flutter",
    "flutter-cli",
    "flutter-generator",
    "flutter-template",
    "flutter-boilerplate",
    "dart",
    "mobile-development",
    "app-development",
    "cross-platform",
    "ai",
    "ai-automation",
    "ai-powered",
    "ai-assistant",
    "ai-code-generation",
    "claude-code",
    "qwen-code",
    "qwen3-coder",
    "gemini-cli",
    "gemini-code-assist",
    "google-gemini",
    "anthropic-claude",
    "automation",
    "code-automation",
    "development-automation",
    "zero-touch",
    "prprompts",
    "prompt-engineering",
    "clean-architecture",
    "bloc",
    "bloc-pattern",
    "state-management",
    "architecture",
    "project-generator",
    "scaffolding",
    "security",
    "security-first",
    "security-audited",
    "compliance",
    "hipaa",
    "hipaa-compliance",
    "pci-dss",
    "gdpr",
    "soc2",
    "coppa",
    "ferpa",
    "healthcare",
    "fintech",
    "productivity",
    "productivity-tools",
    "developer-tools",
    "devtools",
    "rapid-development",
    "fast-development",
    "code-quality",
    "testing",
    "opensource",
    "mit-license"
  ],
  "author": "Kandil7",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Kandil7/prprompts-flutter-generator.git"
  },
  "bugs": {
    "url": "https://github.com/Kandil7/prprompts-flutter-generator/issues"
  },
  "homepage": "https://github.com/Kandil7/prprompts-flutter-generator#readme",
  "engines": {
    "node": ">=18.0.0"
  },
  "preferGlobal": true,
  "bin": {
    "prprompts": "bin/prprompts"
  },
  "files": [
    "bin/",
    "lib/",
    "scripts/",
    ".claude/",
    ".qwen/",
    ".gemini/",
    "completions/",
    "templates/",
    "claude-extension.json",
    "gemini-extension.json",
    "qwen-extension.json",
    "install-claude-extension.sh",
    "install-gemini-extension.sh",
    "install-qwen-extension.sh",
    "README.md",
    "LICENSE",
    "WINDOWS-QUICKSTART.md",
    "CLAUDE.md",
    "GEMINI.md",
    "QWEN.md"
  ],
  "scripts": {
    "test": "jest",
    "test:jest": "jest --coverage",
    "test:validation": "jest tests/validation.test.js",
    "test:package": "jest tests/package.test.js",
    "test:prompts": "jest tests/prompts.test.js",
    "test:bash": "bash ./scripts/test-validation.sh && bash ./scripts/test-commands.sh",
    "test:windows": "powershell -ExecutionPolicy Bypass -File ./scripts/test-validation.ps1 && powershell -ExecutionPolicy Bypass -File ./scripts/test-commands.ps1",
    "test:windows:bat": "./scripts/test-validation.bat && ./scripts/test-commands.bat",
    "test:commands": "bash ./scripts/test-commands.sh",
    "test:quick": "echo \"✅ Quick validation: Checking prompt files...\" && ls .claude/prompts/*.md | wc -l",
    "test:integration-suite": "bash ./scripts/test-integration.sh",
    "test:coverage": "bash ./scripts/test-coverage.sh",
    "test:performance": "bash ./scripts/test-performance.sh",
    "test:all": "npm run lint && npm run test && npm run test:integration && npm run test:coverage",
    "test:integration": "npm run test:local-install && npm run test:examples && npm run test:integration-suite",
    "test:local-install": "npm install -g . && prprompts --version && echo \"✅ Local installation successful\"",
    "test:examples": "bash -c 'mkdir -p test-output && cd test-output && cp ../examples/healthcare-prd.md . && echo \"✅ Example tests passed\"'",
    "test:ci": "npm run test:all && npm run test:performance",
    "bench": "npm run test:performance",
    "benchmark": "npm run test:performance",
    "lint": "npm run lint:markdown && npm run lint:shell",
    "lint:markdown": "markdownlint '**/*.md' --ignore node_modules --config .markdownlint.json || echo \"⚠️  Markdown linting found issues (non-blocking)\"",
    "lint:shell": "shellcheck scripts/*.sh || echo \"⚠️  Shell linting found issues (non-blocking)\"",
    "lint:fix": "markdownlint '**/*.md' --ignore node_modules --config .markdownlint.json --fix",
    "validate": "npm run validate:package && npm run validate:extensions",
    "validate:package": "npm pack --dry-run && echo \"✅ Package validated\"",
    "validate:extensions": "bash -c 'for file in *-extension.json; do echo \"Validating $file...\"; node -e \"JSON.parse(require(\\\"fs\\\").readFileSync(\\\"$file\\\", \\\"utf8\\\"))\" || exit 1; done && echo \"✅ All extensions valid\"'",
    "precommit": "npm run lint && npm run test",
    "prepublishOnly": "npm run test:all && npm run validate:package",
    "setup": "./scripts/setup.sh",
    "smart-install": "bash ./scripts/smart-install.sh",
    "generate": "./scripts/generate-prprompts.sh all",
    "install-claude": "./scripts/install-commands.sh --global",
    "install-qwen": "./scripts/install-qwen-commands.sh --global",
    "install-gemini": "./scripts/install-gemini-commands.sh --global",
    "install-all": "./scripts/install-all.sh --global",
    "generate-qwen-toml": "node ./scripts/generate-qwen-toml-skills.js",
    "generate-gemini-toml": "node ./scripts/generate-gemini-toml-skills.js",
    "test:qwen-skills": "bash ./scripts/test-qwen-skills.sh || echo \"⚠️  Qwen skills test script not found\"",
    "test:gemini-skills": "bash ./scripts/test-gemini-skills.sh",
    "update": "node ./lib/updater.js update",
    "check-updates": "node ./lib/updater.js check",
    "postinstall": "node ./scripts/postinstall.js",
    "clean": "rm -rf node_modules test-output coverage *.tgz && echo \"✅ Cleaned build artifacts\"",
    "doctor": "npm run check-updates && npm run validate && npm test && echo \"✅ Health check passed\"",
    "debug": "DEBUG=true prprompts",
    "dev": "npm install -g . && echo \"✅ Development build installed\"",
    "auto:status": "node ./lib/automation-manager.js status",
    "auto:validate": "node ./lib/automation-validator.js",
    "auto:bootstrap": "node ./lib/automation-manager.js bootstrap",
    "auto:implement": "node ./lib/automation-manager.js implement",
    "auto:test": "node ./lib/automation-manager.js test",
    "auto:reset": "node ./lib/automation-manager.js reset"
  },
  "peerDependencies": {
    "@anthropic-ai/claude-code": ">=1.0.0"
  },
  "optionalDependencies": {
    "@google/gemini-cli": ">=1.0.0",
    "@qwenlm/qwen-code": ">=1.0.0"
  },
  "devDependencies": {
    "jest": "^30.2.0"
  }
}
