name: Publish to npm

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 4.0.1)'
        required: true
        type: string

jobs:
  publish:
    name: Publish to npm
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci || npm install

      - name: Run tests
        run: npm test

      - name: Verify package contents
        run: |
          npm pack --dry-run
          echo "‚úÖ Package verified"

      - name: Get version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Publishing version: $VERSION"

      - name: Verify package.json version matches tag
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION="${{ steps.get_version.outputs.version }}"

          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "‚ùå Version mismatch!"
            echo "package.json: $PACKAGE_VERSION"
            echo "Tag: $TAG_VERSION"
            echo "Please update package.json version to match tag"
            exit 1
          fi
          echo "‚úÖ Version match confirmed: $PACKAGE_VERSION"

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          body: |
            ## PRPROMPTS Flutter Generator v${{ steps.get_version.outputs.version }}

            ### Installation
            ```bash
            npm install -g prprompts-flutter-generator@${{ steps.get_version.outputs.version }}
            ```

            ### What's New
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/master/CHANGELOG.md) for full details.

            ### Quick Start
            ```bash
            npm install -g prprompts-flutter-generator
            prprompts create
            prprompts generate
            ```

            ### Documentation
            - [README](https://github.com/${{ github.repository }}#readme)
            - [PRPROMPTS Specification](https://github.com/${{ github.repository }}/blob/master/docs/PRPROMPTS-SPECIFICATION.md)
            - [Automation Guide](https://github.com/${{ github.repository }}/blob/master/docs/AUTOMATION-GUIDE.md)

            ### AI Extensions
            - [Claude Code Extension](https://github.com/${{ github.repository }}/blob/master/CLAUDE.md)
            - [Qwen Code Extension](https://github.com/${{ github.repository }}/blob/master/QWEN.md)
            - [Gemini CLI Extension](https://github.com/${{ github.repository }}/blob/master/GEMINI.md)

            ---

            **npm:** https://www.npmjs.com/package/prprompts-flutter-generator/v/${{ steps.get_version.outputs.version }}

            ü§ñ Generated with [Claude Code](https://claude.com/claude-code)
          draft: false
          prerelease: false

      - name: Notify success
        if: success()
        run: |
          echo "‚úÖ Successfully published v${{ steps.get_version.outputs.version }} to npm!"
          echo "üì¶ Package: https://www.npmjs.com/package/prprompts-flutter-generator/v/${{ steps.get_version.outputs.version }}"

      - name: Notify failure
        if: failure()
        run: |
          echo "‚ùå Failed to publish to npm"
          echo "Please check the logs above for details"
          exit 1

  verify-publish:
    name: Verify npm publish
    runs-on: ubuntu-latest
    needs: publish

    steps:
      - name: Wait for npm registry
        run: sleep 60

      - name: Verify package is available
        run: |
          VERSION="${{ needs.publish.outputs.version }}"
          npm view prprompts-flutter-generator@$VERSION version

          if [ $? -eq 0 ]; then
            echo "‚úÖ Package verified on npm registry"
          else
            echo "‚ùå Package not found on npm registry"
            exit 1
          fi

      - name: Test installation
        run: |
          VERSION="${{ needs.publish.outputs.version }}"
          npm install -g prprompts-flutter-generator@$VERSION
          prprompts --version

          if [ $? -eq 0 ]; then
            echo "‚úÖ Package installs successfully"
          else
            echo "‚ùå Package installation failed"
            exit 1
          fi

  post-publish:
    name: Post-publish tasks
    runs-on: ubuntu-latest
    needs: [publish, verify-publish]

    steps:
      - uses: actions/checkout@v4

      - name: Bump version for next development cycle
        run: |
          # This is optional - helps prepare for next version
          echo "Consider bumping package.json version for next development cycle"
          echo "Current version: $(node -p "require('./package.json').version")"

      - name: Update documentation
        run: |
          echo "Consider updating:"
          echo "- CHANGELOG.md with release notes"
          echo "- README.md if needed"
          echo "- Social media announcements"
