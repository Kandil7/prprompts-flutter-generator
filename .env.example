# ============================================
# PRPROMPTS AI Provider Configuration
# ============================================
#
# This file contains environment variable templates for AI provider authentication.
#
# SETUP INSTRUCTIONS:
# 1. Copy this file: cp .env.example .env
# 2. Fill in your actual API keys in the .env file
# 3. NEVER commit .env to version control (already in .gitignore)
#
# SECURITY: See SECURITY.md for detailed API key management guidance
# ============================================

# ============================================
# CLAUDE CODE (by Anthropic)
# ============================================
# Claude Code is the official CLI for Claude, built by Anthropic.
#
# Authentication Method: API Key
# Get your key: https://console.anthropic.com/settings/keys
# Documentation: https://docs.anthropic.com/claude/docs
# Pricing: https://www.anthropic.com/pricing
#
# Note: Claude Code CLI may handle authentication via its own config.
# Check: ~/.config/claude/config.json or run `claude auth login`
#
# Uncomment and set your key if using environment variables:
# ANTHROPIC_API_KEY=sk-ant-api03-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# ============================================
# QWEN CODE (by Alibaba Cloud)
# ============================================
# Qwen Code is the official CLI for Qwen, built by Alibaba Cloud.
#
# Authentication Method: API Key (DashScope)
# Get your key: https://dashscope.aliyun.com/
# Documentation: https://help.aliyun.com/zh/dashscope/
# Pricing: https://dashscope.aliyun.com/pricing
#
# Note: Qwen Code CLI may handle authentication via its own config.
# Check: ~/.config/qwen/config.json or run `qwen auth login`
#
# Uncomment and set your key if using environment variables:
# DASHSCOPE_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# QWEN_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# ============================================
# GEMINI CLI (by Google)
# ============================================
# Gemini CLI is the official command-line interface for Google's Gemini models.
#
# Authentication Method: API Key (Google AI Studio)
# Get your key: https://aistudio.google.com/app/apikey
# Documentation: https://ai.google.dev/gemini-api/docs
# Pricing: https://ai.google.dev/pricing
#
# Note: Gemini CLI may handle authentication via its own config.
# Check: ~/.config/gemini/config.json or run `gemini auth login`
#
# Uncomment and set your key if using environment variables:
# GOOGLE_API_KEY=AIzaSyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# GEMINI_API_KEY=AIzaSyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# ============================================
# ADDITIONAL CONFIGURATION (Optional)
# ============================================

# PRPROMPTS Settings
# PRPROMPTS_DEFAULT_AI=claude        # Default AI to use (claude, qwen, gemini)
# PRPROMPTS_VERBOSE=true             # Enable verbose logging
# PRPROMPTS_AUTO_UPDATE=true         # Auto-check for updates

# Flutter Project Settings
# FLUTTER_SDK=/path/to/flutter       # Custom Flutter SDK path (optional)
# DART_SDK=/path/to/dart             # Custom Dart SDK path (optional)

# ============================================
# SECURITY BEST PRACTICES
# ============================================
#
# ‚úÖ DO:
# - Use separate API keys for development and production
# - Rotate keys every 90 days
# - Revoke unused or old keys immediately
# - Use environment-specific .env files (.env.dev, .env.prod)
# - Store keys in secure secret management systems for production
# - Set minimal permissions/scopes for each key
# - Monitor API usage for anomalies
#
# ‚ùå DON'T:
# - NEVER commit .env files to version control
# - NEVER share API keys in issues, pull requests, or public forums
# - NEVER hardcode API keys in source code
# - NEVER use production keys in development environments
# - NEVER expose keys in client-side code or logs
# - NEVER reuse the same key across multiple projects/teams
#
# üö® IF YOU ACCIDENTALLY COMMIT AN API KEY:
# 1. Immediately revoke the key in the provider's console
# 2. Generate a new key
# 3. Update your .env file with the new key
# 4. Purge the key from git history (see SECURITY.md)
# 5. Notify your security team if applicable
#
# For detailed security guidance, see:
# - SECURITY.md (in this repository)
# - https://github.com/Kandil7/prprompts-flutter-generator/blob/master/SECURITY.md
#
# ============================================
# VERIFICATION
# ============================================
#
# After setting up your API keys, verify each AI CLI is working:
#
# $ claude --version
# $ qwen --version
# $ gemini --version
#
# Then test PRPROMPTS:
# $ prprompts --version
# $ prprompts doctor
#
# For troubleshooting, see:
# - docs/TROUBLESHOOTING.md
# - https://github.com/Kandil7/prprompts-flutter-generator#troubleshooting
# ============================================
